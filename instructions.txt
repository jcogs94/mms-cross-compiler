For compiling with a MAKEFILE:
1. Run "install.sh"
2. Run "buildImage.sh"
3. Copy "crossCompile.sh" to your project directory that includes the MAKEFILE
	(the "crossCompile.sh" script should be in the same place that you would
	  normally run the "make" command in)
4. Run "crossCompile.sh" script

For compiling a single file:
1. Run "install.sh"
2. Run "cd" command into the "single-file" directory
3. Run "buildImage.sh"
4. Run "crossCompileFile.sh" script and pass the name of the file you want compiled
	first and then the name of the output file
	(ex. "./crossCompileFile.sh test.c outputExecutable")

NOTES:
- The "install.sh" only needs to be run once for either MAKEFILE or single file. It
  does not need to be run for each (if using both). Only the "buildImage.sh" and their
  respective "crossCompile*.sh" files are different. Each "buildImage.sh" script builds
  a separate Docker image that can be run later and that image will remain on your machine
- Once the "install.sh" and "buildImage.sh" scripts have been built, they do not need
  to be run again. Only the "crossCompile*.sh" script needs to be run
- The script for cross-compiling a single file can also be copied elsewhere, but will
  still need to be passed the input and output file paths
- Compiling with MAKEFILE has not yet been tested and will most likely need more
  libraries added to the Dockerfile dependancies install
